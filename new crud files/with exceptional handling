import java.util.*;
import java.io.*;

// Custom exception for query format errors
class QueryFormatException extends Exception {
    public QueryFormatException(String message) {
        super(message);
    }
}

class Data_read {
    static final String FILE_NAME = "dbms_data";

    void data_read() {
        try (BufferedReader B_read = new BufferedReader(new FileReader(FILE_NAME))) {
            String str;
            System.out.println("Reading data from file: " + FILE_NAME);

            while ((str = B_read.readLine()) != null) {
                System.out.println(str);
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error: The file '" + FILE_NAME + "' was not found. Please check the file path.");
        } catch (IOException e) {
            System.out.println("Error: Unable to read from file due to an I/O error.");
            e.printStackTrace();
        }
    }
}

// HashMap class for formatting 
class Mapping_task {
    static final String FILE_NAME = "dbms_data";
    private HashMap<String, HashMap<String, String>> Main_mapping = new HashMap<>();

    // Validates the query format before processing it
    private void validateQuery(String query) throws QueryFormatException {
        if (query.isEmpty()) {
            throw new QueryFormatException("Query is empty. Please enter a valid query.");
        }
        if (!query.contains(":")) {
            throw new QueryFormatException("Query must contain a ':' symbol to specify main and sub-keys.");
        }
        if (!query.toLowerCase().startsWith("delete") &&
            !query.toLowerCase().startsWith("create") &&
            !query.toLowerCase().startsWith("insert into") &&
            !query.toLowerCase().startsWith("update")) {
            throw new QueryFormatException("Query must start with a valid command: DELETE, CREATE, INSERT INTO, or UPDATE.");
        }
        if (query.toLowerCase().startsWith("insert into") && !query.contains("values")) {
            throw new QueryFormatException("INSERT query must contain the keyword 'VALUES' to specify key-value pairs.");
        }
        if (query.toLowerCase().startsWith("update") && !query.contains("values") && !query.contains("to")) {
            throw new QueryFormatException("UPDATE query must contain either 'VALUES' for sub-key updates or 'TO' for main key renaming.");
        }
    }

    void deleteMainKey(String mainKey) {
        if (Main_mapping.containsKey(mainKey)) {
            Main_mapping.remove(mainKey);
            System.out.println("Main key '" + mainKey + "' deleted.");
        } else {
            System.out.println("Main key '" + mainKey + "' does not exist.");
        }
    }

    void deleteSubKey(String mainKey, List<String> subKeys) {
        if (Main_mapping.containsKey(mainKey)) {
            HashMap<String, String> subMap = Main_mapping.get(mainKey);
            for (String subKey : subKeys) {
                if (subMap.containsKey(subKey)) {
                    subMap.remove(subKey);
                    System.out.println("Sub-key '" + subKey + "' deleted from main key '" + mainKey + "'.");
                } else {
                    System.out.println("Sub-key '" + subKey + "' does not exist under main key '" + mainKey + "'.");
                }
            }
            if (subMap.isEmpty()) {
                Main_mapping.remove(mainKey);
                System.out.println("Main key '" + mainKey + "' deleted as it has no sub-keys left.");
            }
        } else {
            System.out.println("Main key '" + mainKey + "' does not exist.");
        }
    }

    void processQuery(String query) {
        query = query.trim();

        try {
            validateQuery(query); // Validate query format

            if (query.toLowerCase().startsWith("delete")) {
                if (query.toLowerCase().startsWith("delete from")) {
                    String mainKeyPart = query.substring(query.indexOf(":") + 1, query.indexOf("{")).trim().replace("\"", "").replace("delete from ", "").trim();
                    String valuesPart = query.substring(query.indexOf("{") + 1, query.indexOf("}")).trim();
                    String[] subKeys = valuesPart.split(",");

                    List<String> subKeysList = new ArrayList<>();
                    for (String key : subKeys) {
                        subKeysList.add(key.split(":")[1].trim());
                    }

                    deleteSubKey(mainKeyPart, subKeysList);
                } else {
                    String mainKey = query.substring(query.indexOf(":") + 1).trim().replace("\"", "");
                    deleteMainKey(mainKey);
                }
            } else if (query.toLowerCase().startsWith("create")) {
                String mainKey = query.substring(query.indexOf(":") + 1).trim().replace("\"", "");
                Main_mapping.putIfAbsent(mainKey, new HashMap<>());
                System.out.println("Main key '" + mainKey + "' created.");
            } else if (query.toLowerCase().startsWith("insert into")) {
                String[] parts = query.split("values");
                String mainKeyPart = parts[0].substring(query.indexOf(":") + 1).trim().replace("\"", "").replace("insert into ", "").trim();
                String valuesPart = parts[1].trim();

                if (!Main_mapping.containsKey(mainKeyPart)) {
                    System.out.println("Main key '" + mainKeyPart + "' does not exist. Use CREATE first.");
                    return;
                }

                valuesPart = valuesPart.substring(1, valuesPart.length() - 1);
                String[] keyValuePairs = valuesPart.split("},\\s*\\{");

                for (String pair : keyValuePairs) {
                    pair = pair.replace("{", "").replace("}", "").trim();
                    String[] keyValue = pair.split(",");
                    if (keyValue.length != 2) {
                        System.out.println("Invalid key-value format: " + pair);
                        continue;
                    }
                    String subKey = keyValue[0].split(":")[1].trim();
                    String value = keyValue[1].split(":")[1].trim();
                    Main_mapping.get(mainKeyPart).put(subKey, value);
                }
                System.out.println("\nInserted values into '" + mainKeyPart + "'.");
            } else if (query.toLowerCase().startsWith("update ")) {
                if (query.contains("to")) {
                    String[] parts = query.split("to");
                    String oldMainKey = parts[0].substring(query.indexOf(":") + 1).trim().replace("\"", "").replace("update ", "").trim();
                    String newMainKey = parts[1].trim().replace("\"", "");

                    if (Main_mapping.containsKey(oldMainKey)) {
                        if (!Main_mapping.containsKey(newMainKey)) {
                            Main_mapping.put(newMainKey, Main_mapping.remove(oldMainKey));
                            System.out.println("Main key '" + oldMainKey + "' updated to '" + newMainKey + "'.");
                        } else {
                            System.out.println("Main key '" + newMainKey + "' already exists. Merging entries.");
                            Main_mapping.get(newMainKey).putAll(Main_mapping.remove(oldMainKey));
                        }
                    } else {
                        System.out.println("Main key '" + oldMainKey + "' does not exist.");
                    }
                } else {
                    String[] parts = query.split("values");
                    String mainKey = parts[0].substring(query.indexOf(":") + 1).trim().replace("\"", "").replace("update ", "").trim();
                    String valuesPart = parts[1].trim();

                    if (!Main_mapping.containsKey(mainKey)) {
                        System.out.println("Main key '" + mainKey + "' does not exist. Use CREATE first.");
                        return;
                    }

                    valuesPart = valuesPart.substring(1, valuesPart.length() - 1);
                    String[] keyValuePairs = valuesPart.split("},\\s*\\{");

                    for (String pair : keyValuePairs) {
                        pair = pair.replace("{", "").replace("}", "").trim();
                        String[] keyValue = pair.split(",");
                        if (keyValue.length != 2) {
                            System.out.println("Invalid key-value format: " + pair);
                            continue;
                        }
                        String subKey = keyValue[0].split(":")[1].trim();
                        String value = keyValue[1].split(":")[1].trim();
                        Main_mapping.get(mainKey).put(subKey, value);
                    }
                    System.out.println("\nUpdated values in '" + mainKey + "'.");
                }
            } else {
                System.out.println("\nInvalid query.");
            }
        } catch (QueryFormatException e) {
            System.out.println("Query Format Error: " + e.getMessage());
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Query format is incorrect. Please check the syntax.");
        } catch (Exception e) {
            System.out.println("An unexpected error occurred while processing the query.");
            e.printStackTrace();
        }
    }

    // Other methods remain the same...
}

public class dbms {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Data_read dr = new Data_read();
        Mapping_task mt = new Mapping_task();

        while (true) {
            System.out.println("\n1. Read data from file\n2. Enter query\n3. Exit");
            System.out.print("Enter your choice: ");
            try {
                int i = sc.nextInt();
                sc.nextLine(); // Consume newline

                switch (i) {
                    case 1:
                        dr.data_read();
                        break;
                    case 2:
                        System.out.print("Enter query: ");
                        String query = sc.nextLine();
                        mt.processQuery(query);
                        break;
                    case 3:
                        System.out.println("Exiting...");
                        return;
                    default:
                        System.out.println("Invalid choice. Please select 1, 2, or 3.");
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter an integer.");
                sc.next(); // Clear invalid input
            } catch (Exception e) {
                System.out.println("An unexpected error occurred.");
                e.printStackTrace();
            }
        }
    }
}
